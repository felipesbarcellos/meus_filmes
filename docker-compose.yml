version: '3.8'

services:
  db:
    image: mysql:8.0.32  # Versão específica em vez de apenas 8.0
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "3307:3306"  # Mapeando porta externa 3307 para interna 3306
    volumes:
      - db_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 20
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  backend:
    build:
      context: ./api-backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./api-backend/instance:/app/instance
    depends_on:
      db:
        condition: service_healthy  # Isso já está correto! Só vai iniciar quando o db estiver saudável
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DATABASE_URL=mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE}  # CORRIGIDO: porta deve ser 3306
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    restart: unless-stopped
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5173"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  nginx:
    image: nginx:1.25.3-alpine  # Versão específica e usando Alpine para imagem menor
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx:/var/log/nginx  # Adicionar esta linha
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 3

  backup:
    image: mysql:8.0.32
    env_file:
      - .env
    environment:
      - MYSQL_PWD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./backups:/backups
    command: >
      bash -c '
        mkdir -p /backups &&
        echo "Criando backup em $(date +%Y-%m-%d_%H-%M-%S)" &&
        mysqldump -h db -uroot -p${MYSQL_ROOT_PASSWORD} ${MYSQL_DATABASE} --no-tablespaces > /backups/backup_$(date +%Y%m%d_%H%M%S).sql &&
        echo "Backup concluído com sucesso!"
      '
    depends_on:
      - db
    restart: "no"  # Não reiniciar automaticamente
    profiles: ["tools"]  # Não inicia com docker-compose up (use docker-compose --profile tools up backup)

volumes:
  db_data:

networks:
  default:
    driver: bridge